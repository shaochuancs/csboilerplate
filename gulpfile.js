var gulp = require('gulp'),
    del = require('del'),
    gulpif = require('gulp-if'),
    htmlhint = require('gulp-htmlhint'),
    jshint = require('gulp-jshint'),
    less = require('gulp-less'),
    gutil = require('gulp-util'),
    autoprefixer = require('gulp-autoprefixer'),
    minifycss = require('gulp-minify-css'),
    uglify = require('gulp-uglify'),
    concat = require('gulp-concat'),
    replace = require('gulp-replace'),
    browserify = require('browserify'),
    glob = require('glob').sync,
    buffer = require('vinyl-buffer'),
    source = require('vinyl-source-stream'),
    transform = require('vinyl-transform'),
    fs = require('fs'),
    properties = require('properties'),
    mobileTPList = require('./web/static/tp/mobile-tp-list'),
    pcTPList = require('./web/static/tp/pc-tp-list'),
    config = require('./config/config');

var DEV_MODE = true;
var browserified = transform(function(filename) {
  var b = browserify({
    entries: glob(filename),
    paths: ['./web/components']
  });
  return b.bundle();
});

// Views
gulp.task('views', function(){
  return gulp.src(['web/views/**/*.html', 'web/components/**/*.html'])
    .pipe(htmlhint({
      'doctype-first': false
    }))
    .pipe(htmlhint.failReporter())
    .pipe(gulp.dest('web/static/compiled/views'));
});

// Stylesheets
gulp.task('stylesheets', function(){
  return gulp.src(['web/stylesheets/**/*.less', 'web/components/**/*.less'])
    .pipe(less({
      paths: ['./web']
    }))
    .on('error', gutil.log)
    .pipe(autoprefixer({browsers: ['> 1% in CN'], cascade: false}))
    .pipe(gulpif(!DEV_MODE, minifycss()))
    .pipe(gulp.dest('web/static/compiled/stylesheets'));
});

// Scripts
gulp.task('scripts', ['jshint'], function(){
  gulp.start('mobile_scripts', 'pc_scripts');
});

gulp.task('jshint', function() {
  return gulp.src(['./web/components/**/*.js'])
    .pipe(jshint('.jshintrc'))
    .pipe(jshint.reporter('default'))
    .pipe(jshint.reporter('fail'));
});

// Mobile Scripts
gulp.task('mobile_scripts', ['mobile_lib'], function(){
  return browserify({
    entries: glob('./web/components/mobile/controller/**/*.js'),
    paths: ['./web/components']
  })
    .bundle()
    .pipe(source('csboilerplate.js'))
    .pipe(buffer())
    .pipe(gulpif(!DEV_MODE, uglify({
      mangle: false
    })))
    .pipe(gulp.dest('./web/static/compiled/scripts/mobile'));
});

// Third party libraries for mobile script.
gulp.task('mobile_lib', ['mobile_lib_map'], function(){
  return gulp.src(mobileTPList.lib)
    .pipe(gulpif(!DEV_MODE, uglify({
      mangle: false,
      compress: true
    })))
    .pipe(concat('csboilerplate.lib.js'))
    .pipe(gulp.dest('web/static/compiled/scripts/mobile'));
});
//Third party libraries map for mobile script.
gulp.task('mobile_lib_map', function(){
  var glob = gulp.src(mobileTPList.map);
  if (DEV_MODE) {
    return glob.pipe(gulp.dest('web/static/compiled/scripts/mobile'));
  } else {
    return glob;
  }
});

// PC Scripts
gulp.task('pc_scripts', ['pc_lib'], function(){
  return browserify({
    entries: glob('./web/components/pc/controller/**/*.js'),
    paths: ['./web/components']
  })
    .bundle()
    .pipe(source('csboilerplate.js'))
    .pipe(buffer())
    .pipe(gulpif(!DEV_MODE, uglify({
      mangle: false
    })))
    .pipe(gulp.dest('./web/static/compiled/scripts/pc'));
});

// Third party libraries for PC script.
gulp.task('pc_lib', ['pc_lib_map'], function(){
  return gulp.src(pcTPList.lib)
    .pipe(gulpif(!DEV_MODE, uglify({
      mangle: false,
      compress: true
    })))
    .pipe(concat('csboilerplate.lib.js'))
    .pipe(gulp.dest('web/static/compiled/scripts/pc'));
});
//Third party libraries map for PC script.
gulp.task('pc_lib_map', function(){
  var glob = gulp.src(pcTPList.map);
  if (DEV_MODE) {
    return glob.pipe(gulp.dest('web/static/compiled/scripts/pc'));
  } else {
    return glob;
  }
});

// Clean
gulp.task('clean', function(cb) {
  del(['web/static/compiled/views', 'web/static/compiled/stylesheets', 'web/static/compiled/scripts']).then(function(paths){
    cb();
  });
});

// Default task
gulp.task('default', ['clean'], function() {
  config.load(function(obj) {
    DEV_MODE = obj.DEV_MODE;

    var content = '//This file is dynamically generated by config.properties. Please do not change it. \n';
    var constants = content + 'exports.DEV_MODE = "' + obj.DEV_MODE + '";\n' +
                              'exports.SECRET = "' + obj.SECRET + '";\n' +
                              'exports.ENDPOINT = "' + obj.web.ENDPOINT + '";\n' +
                              'exports.USE_NORMALIZE = "' + obj.web.USE_NORMALIZE + '"';
    fs.writeFileSync('config/constants.js', constants);

    gulp.start('views', 'stylesheets', 'scripts');
  });
});

gulp.task('watch', ['default'], function() {
  gulp.watch(['web/stylesheets/**/*.less', 'web/components/**/*.less'], ['stylesheets']);
  gulp.watch('web/components/**/*.js', ['scripts']);
  gulp.watch('web/**/*.html', ['views']);
});